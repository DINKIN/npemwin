#!%TCLSH%
#
# $Id$
#

## The common defaults
set _defaultsfile "/usr/local/etc/npemwin/filters.conf";
if {[file exists ${_defaultsfile}] == 0} {
    puts "stdfilter disabled: ${_defaultsfile} not found.";
    return 1;
}
source ${_defaultsfile};
unset _defaultsfile;

## The filter library
if {[file exists $gf(filterlib)] == 0} {
        puts "stdfilter disabled: $gf(filterlib) not found.";
        return 1;
}
source $gf(filterlib);

# Default configuration is in the init file because it is shared with
# the http server.
set _initfile [file join $gf(filterdir) "stdfilter.init"];
if {[file exists ${_initfile}] == 0} {
    puts "stdfilter disabled: ${_initfile} not found.";
    return 1;
}
source ${_initfile};
unset _initfile;
#
# variables
set stdfilter(rcfiles)	[list];
set stdfilter(condition)	[list];
set stdfilter(action)		[list];

# The main rc file is required
if {[file exists $stdfilter(rc)] == 0} {
    log_msg "Filter disabled: $stdfilter(rc) not found.";
    return 1;
}

# Build the list of rc files
set stdfilter(rcfiles) [concat $stdfilter(defaultsrc) \
	[filterlib_get_rcfiles [file tail $stdfilter(rc)] \
        $stdfilter(confdirs) $stdfilter(rcdir) $stdfilter(postrc)]];

# Load the rules sets
source $stdfilter(rc);

proc main {} {

    global errorInfo;

    while {[gets stdin line] >= 0} {
	if {[regexp {^\s*$} $line]} {
	    continue;
	}
	set args [split $line];
	set argsc [llength $args];
    	if {$argsc != 2} {
            log_msg "Incorrect number of arguments: $args";
	    continue;
        }

    	set prodname [lindex $args 0];
    	set fpath [lindex $args 1];
    
        set status [catch {process $prodname $fpath} errmsg];
	if {$status == 1} {
	    log_msg "Error processing $prodname";
	    log_msg $errmsg;
	    log_msg $errorInfo;
	}
    }
}

proc process {prodname fpath} {

    global stdfilter;

    set rclist [filterlib_get_rcvars $prodname $fpath];
    array set rc $rclist

    # The da rules uses these variables. The da rules have now a separate
    # filter however so this no longer used.
    set seconds [filterlib_date_clock_seconds $rc(header_time)];
    set ymd_hm [clock format $seconds -gmt true -format "%Y%m%d_%H%M"];
    set ymdh [clock format $seconds -gmt true -format "%Y%m%d%H"];
    set ymd [clock format $seconds -gmt true -format "%Y%m%d"];
    set ym [clock format $seconds -gmt true -format "%Y%m"];
    set yyyy [clock format $seconds -gmt true -format "%Y"];
    unset seconds;

    set rc_status 1;

    # Evaluate the condition/action pairs, from all sets.
    set status [catch {
	set i 0;		# counts the sets
	foreach condlist $stdfilter(condition) {
	    set actionlist [lindex $stdfilter(action) $i];
	    set j 0;	# counts the rules with each set
	    foreach c $condlist {
		set a [lindex $actionlist $j];
		if {[expr $c]} {
		    eval $a;
		}
		incr j;
	    }
	    incr i;
	}
    } errmsg];

    if {$status == 1} {
	log_msg "Error processing $fpath";
	log_msg $errmsg;
    }
}

#
# The are functions to support the da and ldm filters.
# (Both are now in a separate filter so this function is not used).
#

proc proc_file {seq fpath savedir savename awflag} {
#
# If "awflag" is a, the output file is opened in "append" mode,
# otherwise in "write" mode (i.e., it is assumed to be "w").

    global stdfilter;

    # The gempal-like header/footers
    set gmpk_header_fmt "\001\r\r\n%03d \r\r\n"; 
    set gmpk_trailer_str "\r\r\n\003"; 

    set currdir [pwd];
    cd $stdfilter(dadir);
    file mkdir $savedir;
    cd $currdir;

    set fpathout [file join $stdfilter(dadir) $savedir $savename];	

    set status [catch {
	set fout [open $fpathout $awflag];
	set fin  [open $fpath r];
	fconfigure $fin -translation binary -encoding binary;
	fconfigure $fout -translation binary -encoding binary;

        puts -nonewline $fout [format $gmpk_header_fmt [expr $seq % 1000]];
        puts -nonewline $fout [read $fin];
        puts -nonewline $fout $gmpk_trailer_str;        
    } errmsg];

    if {[info exists fout]} {
	close $fout;
    }

    if {[info exists fin]} {
	close $fin;
    }

    if {$status != 0} {
	log_msg $errmsg;
    }
}

main
