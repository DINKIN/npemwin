#!%TCLSH%
#
# $Id$
#

## The common defaults
set _defaultsfile "/usr/local/etc/npemwin/filters.conf";
if {[file exists ${_defaultsfile}] == 0} {
    puts "npemwinfilter disabled: ${_defaultsfile} not found.";
    return 1;
}
source ${_defaultsfile};

## The filter library
if {[file exists $gf(filterlib)] == 0} {
        puts "npemwinfilter disabled: $gf(filterlib) not found.";
        return 1;
}
source $gf(filterlib);

# default configuration file and rc script
set npemwinfilter(conf)    [file join $gf(confdir) "npemwinfilter.conf"];
set npemwinfilter(rc)      [file join $gf(confdir) "npemwinfilter.rc"];
set npemwinfilter(rq)      [file join $gf(confdir) "npemwinfilter.rq"];
set npemwinfilter(rcdir)   [file join $gf(confdir) "rc.d" "npemwin"];
set npemwinfilter(lib)     [file join $gf(localfilterdir) "npemwinfilter.lib"];
set npemwinfilter(confdirs) $gf(localconfdirs)
set npemwinfilter(postrc)   "";
# variables
set npemwinfilter(rcfiles)  [list];
set npemwinfilter(condition)	[list];
set npemwinfilter(action)		[list];

#
# Read the default configuration file for this filter.
#
if {[file exists $npemwinfilter(conf)] == 1} {
    source $npemwinfilter(conf);
}

# The main rc file is required
if {[file exists $npemwinfilter(rc)] == 0} {
    log_msg "Filter disabled: $npemwinfilter(rc) not found.";
    return 1;
}

# Build the list of rc files
set npemwinfilter(rcfiles) [filterlib_get_rcfiles \
    [file tail $npemwinfilter(rc)] \
    $npemwinfilter(confdirs) $npemwinfilter(rcdir) $npemwinfilter(postrc)];

# Load the rules sets
source $npemwinfilter(rc);

proc main {} {

    global errorInfo;

    while {[gets stdin line] >= 0} {
	if {[regexp {^\s*$} $line]} {
	    continue;
	}
	set args [split $line];
	set argsc [llength $args];
    	if {$argsc != 2} {
            log_msg "Incorrect number of arguments: $args";
	    continue;
        }

    	set prodname [lindex $args 0];
    	set fpath [lindex $args 1];
    
        set status [catch {process $prodname $fpath} errmsg];
	if {$status == 1} {
	    log_msg "Error processing $prodname";
	    log_msg $errmsg;
	    log_msg $errorInfo;
	}
    }
}

proc process {prodname fpath} {

    global npemwinfilter;

    filterlib_get_rcvars rc $prodname $fpath;

    set rc_status 1;

    # Evaluate the condition/action pairs, from all sets.
    set status [catch {
	set i 0;		# counts the sets
	foreach condlist $npemwinfilter(condition) {
	    set actionlist [lindex $npemwinfilter(action) $i];
	    set j 0;	# counts the rules with each set
	    foreach c $condlist {
		set a [lindex $actionlist $j];
		if {[expr $c]} {
		    eval $a;
		}
		incr j;
	    }
	    incr i;
	}
    } errmsg];

    if {$status == 1} {
	log_msg "Error processing $fpath";
	log_msg $errmsg;
    }
}

proc quit {} {

    global npemwinfilter;

    # Read any termination code from the files:
    #
    # npemwinfilter.rq
    # defaults/npemwinfilter.rq
    # site/npemwinfilter.rq
    # rc.d/npemwin/*.rq
    #
    
    if {[file exists $npemwinfilter(rq)] == 1} {
	source $npemwinfilter(rq);
    }

    #
    # defaults and site
    #
    set _qname [file tail $npemwinfilter(rq)]
    foreach _d $npemwinfilter(confdirs) {
	set _localqname ${_d}/${_qname}
	if {[file exists ${_localqname}] == 1} {
	    source ${_localqname};
	}
    }
    unset _d;
    unset _qname;
    unset _localqname;

    #
    # rc.d/npemwin
    #
    if {[file isdirectory $npemwinfilter(rcdir)] == 1} {
       set _q "";
	foreach _q [glob -nocomplain -directory $npemwinfilter(rcdir) *.rq] {
	    if {[file exists ${_q}] == 1} {
		source ${_q};
	    }
	}
	unset _q;
    }
}

main;

# Read any termination code in the "rq" files
set status [catch {quit} errmsg];
if {$status != 0} {
    log_msg $errmsg;
}
